{"version":3,"sources":["Loading.js","Terrain.js","config.js","gameState.js","Ship.js","Target.js","Enemies.js","LaserController.js","Lasers.js","GameTimer.js","util.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","visible","position","rotation","attach","args","color","transparent","opacity","roughness","metalness","Terrain","terrain","useRef","useFrame","current","z","Math","PI","ref","wireframe","shipPositionState","atom","key","default","enemyPositionState","x","y","laserPositionState","scoreState","Ship","ship","useRecoilState","shipPosition","setShipPosition","mouse","nodes","useLoader","GLTFLoader","console","log","geometry","Default","Target","rearTarget","frontTarget","texture","TextureLoader","load","map","Enemies","enemies","useRecoilValue","enemy","LaserController","lasers","setLasers","onClick","id","random","velocity","emissive","Lasers","laser","GameTimer","setEnemies","setLaserPositions","score","setScore","hitEnemies","filter","p1","p2","a","b","c","sqrt","distance","length","includes","hit","idx","App","style","background","intensity","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c7f9ca7.chunk.js","sourcesContent":["export default function Loading() {\n  return (\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>\n      <sphereGeometry attach=\"geometry\" args={[1, 16, 16]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color=\"white\"\n        transparent\n        opacity={0.6}\n        roughness={1}\n        metalness={0}\n      />\n    </mesh>\n  );\n}\n","import {useRef} from \"react\";\nimport {useFrame} from \"react-three-fiber\";\nimport {GROUND_HEIGHT} from \"./config\";\n\n// A Ground plane that moves relative to the player. The player stays at 0,0\nexport default function Terrain() {\n  const terrain = useRef();\n\n  useFrame(() => {\n    terrain.current.position.z += 0.4;\n  });\n\n  return (\n    <mesh\n      visible\n      position={[0, GROUND_HEIGHT, 0]}\n      rotation={[-Math.PI / 2, 0, 0]}\n      ref={terrain}\n    >\n      <planeBufferGeometry attach=\"geometry\" args={[5000, 5000, 128, 128]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color=\"white\"\n        roughness={1}\n        metalness={0}\n        wireframe\n      />\n    </mesh>\n  );\n}\n","// Game settings.\nconst LASER_RANGE = 100;\nconst LASER_Z_VELOCITY = 1;\nconst ENEMY_SPEED = 0.1;\nconst GROUND_HEIGHT = -50; // A Constant to store the ground height of the game.\n\nexport {LASER_RANGE, LASER_Z_VELOCITY, ENEMY_SPEED, GROUND_HEIGHT};\n","import {atom} from \"recoil\";\n// const initialZPosition = -1;\n// const initialYPosition = -1;\n// const initialYRotation = Math.PI;\n\nexport const shipPositionState = atom({\n  key: \"shipPosition\", // unique ID (with respect to other atoms/selectors)\n  default: {\n    position: {},\n    rotation: {},\n  }, // default value (aka initial value)\n});\n\nexport const enemyPositionState = atom({\n  key: \"enemyPosition\", // unique ID (with respect to other atoms/selectors)\n  default: [\n    {x: -10, y: 10, z: -80},\n    {x: 20, y: 0, z: -100},\n  ], // default value (aka initial value)\n});\n\nexport const laserPositionState = atom({\n  key: \"laserPositions\", // unique ID (with respect to other atoms/selectors)\n  default: [], // default value (aka initial value)\n});\n\nexport const scoreState = atom({\n  key: \"score\", // unique ID (with respect to other atoms/selectors)\n  default: 0, // default value (aka initial value)\n});\n","import React, {useRef} from \"react\";\nimport {useRecoilState} from \"recoil\";\nimport {shipPositionState} from \"./gameState\";\nimport {useLoader, useFrame} from \"react-three-fiber\";\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default function Ship() {\n  const ship = useRef();\n  const [shipPosition, setShipPosition] = useRecoilState(shipPositionState);\n\n  useFrame(({mouse}) => {\n    setShipPosition({\n      position: {x: mouse.x * 6, y: mouse.y * 2},\n      rotation: {\n        z: -mouse.x * 0.5,\n        x: -mouse.x * 0.5,\n        y: -mouse.y * 0.2,\n      },\n    });\n  });\n  // Update the ships position from the updated state.\n  useFrame(() => {\n    ship.current.rotation.z = shipPosition.rotation.z;\n    ship.current.rotation.y = shipPosition.rotation.x;\n    ship.current.rotation.x = shipPosition.rotation.y;\n    ship.current.position.y = shipPosition.position.y;\n    ship.current.position.x = shipPosition.position.x;\n  });\n\n  const {nodes} = useLoader(GLTFLoader, \"models/arwing.glb\");\n  console.log(nodes);\n  const {geometry} = nodes.Default;\n\n  return (\n    <group ref={ship}>\n      <mesh visible geometry={geometry}>\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"white\"\n          roughness={0.3}\n          metalness={0.3}\n        />\n      </mesh>\n    </group>\n  );\n}\n","import React, {useRef} from \"react\";\nimport {useFrame} from \"react-three-fiber\";\nimport {TextureLoader} from \"three\";\n\n// Draws two sprites in front of the ship, indicating the direction of fire.\n// Uses a TextureLoader to load transparent PNG, and sprite to render on a 2d plane facing the camera.\nexport default function Target() {\n  // Create refs for the two sprites we will create.\n  const rearTarget = useRef();\n  const frontTarget = useRef();\n\n  const loader = new TextureLoader();\n  // A png with transparency to use as the target sprite.\n  const texture = loader.load(\"target.png\");\n\n  // Update the position of both sprites based on the mouse x and y position. The front target has a larger scalar.\n  // Its movement in both axis is exagerated since its farther in front. The end result should be the appearance that the\n  // two targets are aligned with the ship in the direction of laser fire.\n  useFrame(({mouse}) => {\n    rearTarget.current.position.y = -mouse.y * 10;\n    rearTarget.current.position.x = -mouse.x * 30;\n\n    frontTarget.current.position.y = -mouse.y * 20;\n    frontTarget.current.position.x = -mouse.x * 60;\n  });\n  // Return a group containing two sprites. One positioned eight units in front of the ship, and the other 16 in front.\n  // We give the spriteMaterial a map prop with the loaded sprite texture as a value/\n  return (\n    <group>\n      <sprite position={[0, 0, -8]} ref={rearTarget}>\n        <spriteMaterial attach=\"material\" map={texture} />\n      </sprite>\n      <sprite position={[0, 0, -16]} ref={frontTarget}>\n        <spriteMaterial attach=\"material\" map={texture} />\n      </sprite>\n    </group>\n  );\n}\n","import {useRecoilValue} from \"recoil\";\nimport {enemyPositionState} from \"./gameState\";\n\n// Manages Drawing enemies that currently exist in state\nexport default function Enemies() {\n  const enemies = useRecoilValue(enemyPositionState);\n  return (\n    <group>\n      {enemies.map((enemy) => (\n        <mesh position={[enemy.x, enemy.y, enemy.z]} key={`${enemy.x}`}>\n          <sphereBufferGeometry attach=\"geometry\" args={[2, 8, 8]} />\n          <meshStandardMaterial attach=\"material\" color=\"white\" wireframe />\n        </mesh>\n      ))}\n    </group>\n  );\n}\n","import {useRecoilValue, useRecoilState} from \"recoil\";\nimport {shipPositionState, laserPositionState} from \"./gameState\";\n\n// An invisible clickable element in the front of the scene.\n// Manages creating lasers with the correct initial velocity on click.\nexport default function LaserController() {\n  const shipPosition = useRecoilValue(shipPositionState);\n  const [lasers, setLasers] = useRecoilState(laserPositionState);\n  return (\n    <mesh\n      position={[0, 0, -8]}\n      onClick={() =>\n        setLasers([\n          ...lasers,\n          {\n            id: Math.random(),\n            x: 0,\n            y: 0,\n            z: 0,\n            velocity: [\n              shipPosition.rotation.x * 6,\n              shipPosition.rotation.y * 5,\n            ],\n          },\n        ])\n      }\n    >\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color=\"orange\"\n        emissive=\"#ff0860\"\n        visible={false}\n      />\n    </mesh>\n  );\n}\n","import React from \"react\";\nimport {useRecoilValue} from \"recoil\";\nimport {laserPositionState} from \"./gameState\";\n\n// Draws all of the lasers existing in state.\n// export default function Lasers() {\n//   const lasers = useRecoilValue(laserPositionState);\n//   React.useEffect(() => {\n//     if (lasers.length) console.log(lasers[lasers.length - 1]);\n//   }, [lasers]);\n//   return (\n//     <group>\n//       {lasers.map((laser) => (\n//         <mesh position={[laser.x, laser.y, laser.z]} key={`${laser.id}`}>\n//           <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n//           <meshStandardMaterial attach=\"material\" emissive=\"white\" wireframe />\n//         </mesh>\n//       ))}\n//     </group>\n//   );\n// }\n\nexport default function Lasers() {\n  const lasers = useRecoilValue(laserPositionState);\n  return (\n    <group>\n      {lasers.map((laser) => (\n        <mesh position={[laser.x, laser.y, laser.z]} key={`${laser.id}`}>\n          <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n          <meshStandardMaterial attach=\"material\" emissive=\"white\" wireframe />\n        </mesh>\n      ))}\n    </group>\n  );\n}\n","import {useFrame} from \"react-three-fiber\";\nimport {useRecoilState} from \"recoil\";\nimport {enemyPositionState, laserPositionState, scoreState} from \"./gameState\";\nimport {\n  LASER_RANGE,\n  LASER_Z_VELOCITY,\n  ENEMY_SPEED,\n  GROUND_HEIGHT,\n} from \"./config\";\nimport {distance} from \"./util\";\n\n// This component runs game logic on each frame draw to update game state.\nexport default function GameTimer() {\n  const [enemies, setEnemies] = useRecoilState(enemyPositionState);\n  const [lasers, setLaserPositions] = useRecoilState(laserPositionState);\n  const [score, setScore] = useRecoilState(scoreState);\n\n  useFrame(({mouse}) => {\n    // Map through all of the enemies in state. Detect if each enemy is within one unit of a laser if they are set that place in the return array to true.\n    // The result will be an array where each index is either a hit enemy or an unhit enemy.\n    const hitEnemies = enemies\n      ? enemies.map(\n          (enemy) =>\n            lasers.filter(\n              (laser) =>\n                lasers.filter((laser) => distance(laser, enemy) < 3).length > 0\n            ).length > 0\n        )\n      : [];\n\n    if (hitEnemies.includes(true) && enemies.length > 0) {\n      setScore(score + hitEnemies.filter((hit) => hit).length);\n      console.log(\"hit detected\");\n    }\n    // Move all of the enemies. Remove enemies that have been destroyed, or that have passed the player.\n    setEnemies(\n      enemies\n        .map((enemy) => ({x: enemy.x, y: enemy.y, z: enemy.z + ENEMY_SPEED}))\n        .filter((enemy, idx) => !hitEnemies[idx] && enemy.z < 0)\n    );\n\n    // Move the Lasers and remove lasers at end of range or that have hit the ground.\n    setLaserPositions(\n      lasers\n        .map((laser) => ({\n          id: laser.id,\n          x: laser.x + laser.velocity[0],\n          y: laser.y + laser.velocity[1],\n          z: laser.z - LASER_Z_VELOCITY,\n          velocity: laser.velocity,\n        }))\n        .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\n    );\n  });\n  return null;\n}\n","// A helper function to calculate the distance between two points in 3d space.\n// Used to detect lasers intersecting with enemies.\nfunction distance(p1, p2) {\n  const a = p2.x - p1.x;\n  const b = p2.y - p1.y;\n  const c = p2.z - p1.z;\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\n\nexport {distance};\n","import React, {Suspense} from \"react\";\nimport {Canvas} from \"react-three-fiber\";\n// import {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {RecoilRoot} from \"recoil\";\nimport \"./styles.css\";\nimport Loading from \"./Loading\";\nimport Terrain from \"./Terrain\";\nimport Ship from \"./Ship\";\n// import CameraControls from \"./CameraControls\";\nimport Target from \"./Target\";\nimport Enemies from \"./Enemies\";\nimport LaserController from \"./LaserController\";\nimport Lasers from \"./Lasers\";\nimport GameTimer from \"./GameTimer\";\n\n// Extend will make OrbitControls available as a JSX element called orbitControls for us to use.\n// extend({OrbitControls});\n\nexport default function App() {\n  return (\n    <Canvas style={{background: \"black\"}}>\n      <RecoilRoot>\n        <directionalLight intensity={1} />\n        <ambientLight intensity={0.1} />\n        <Terrain />\n        <Suspense fallback={<Loading />}>\n          <Ship />\n        </Suspense>\n        <Target />\n        <Enemies />\n        <Lasers />\n        <LaserController />\n        <GameTimer />\n      </RecoilRoot>\n    </Canvas>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}